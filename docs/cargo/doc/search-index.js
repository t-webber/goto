var searchIndex = new Map(JSON.parse('[\
["goto",{"doc":"<code>goto</code> is a command line tool to navigate through …","t":"FOONNHQCQNCOHCQNNQHCOOQNHHOQNNNOQHPKGPPPPPPFKNMNNNNNNNNNNNNNOHOHMNNNNNNNFKFHNNNNONHNNNNHNNNMOOOOOHHHOHNNNNNNKKKKMMMMMMMMHH","n":["GlobalData","aliass","argcs","borrow","borrow_mut","clear_terminal","command_error","commands","data_error","default","dirs","dirs","dos2unix","errors","file_error","fmt","from","general_error","get_args","hist","hist","incr","internal_error","into","main","no_dirs","no_dirs","system_error","try_from","try_into","type_id","unix","user_error","vscode","Add","AppendDefault","Cmd","Decr","Del","Edit","Get","Reset","Rm","ShortPath","ToCmd","append","append_default","borrow","borrow","borrow_mut","borrow_mut","default","default","fmt","fmt","fmt","from","from","into","into","path","path2dir","short","std_path","to_cmd","to_string","try_from","try_from","try_into","try_into","type_id","type_id","DirsLine","ReadVec","SearchState","add","borrow","borrow","borrow_mut","borrow_mut","correct","default","edit","fmt","fmt","from","from","get","into","into","join","join_elts","max_priory","path","prioritised","priory","priory2","read","read_dline","remove","shorts","state","try_from","try_from","try_into","try_into","type_id","type_id","InteractionError","ReadError","SingleError","WriteError","command_error","data_error","internal_error","read_error","system_error","user_error","user_error","write_error","popd","pushd"],"q":[[0,"goto"],[34,"goto::commands"],[72,"goto::dirs"],[108,"goto::errors"],[120,"goto::hist"],[122,"alloc::string"],[123,"core::fmt"],[124,"core::fmt"],[125,"core::option"],[126,"core::result"],[127,"core::any"],[128,"core::fmt"]],"d":["Structure to contain all the static data of the program","Gives the alias of every supported command","Gives the number of arguments for each supported command …","","","Clear the terminal, unless the <code>noclear</code> argument is present.","Macro to print command error.","This module contains the structure of the options of the …","Macro to print data error.","","This module contains the functions to push and pop …","Path to the file containing the list of shortcuts defined …","Convers path to unix or dos, depending on the OS.","This module contains all the error functions avalaible in …","Macro to print file read/write error.","","Returns the argument unchanged.","Macro to print general errors.","Get the arguments of the command.","This module contains the functions to read and write the …","Path to the file containing the history for the <code>-pop</code> …","When a folder is used, <code>incr</code> is used to increment the usage …","Macro to print internal error.","Calls <code>U::from(self)</code>.","","Find the path of the directory to go to.","Gives the arguments that don’t require reading …","Macro to print internal error.","","","","<code>true</code> if the OS is unix, <code>false</code> if the OS is windows","Macro to print user error.","Open the directory in Visual Studio Code.","Add a directory to the file of supported shortcuts.","Trait to append a default value to a command.","<code>enum</code> to store the command to execute, and its arguments","Decrement the usage of all directories.","Delete a directory from the file of supported shortcuts.","Edit the path of a directory.","Get the path of a directory.","Reset the usage of all directories to 0.","Remove a directory from the file of supported shortcuts.","Contains the shortcut and the path. Is used to store them …","Trait to convert to a command.","Implement the <code>append</code> method for the <code>Cmd</code> enum.","Lone method of the trait.","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Path to the directory, or subpath of the directory …","Function to get the directory from a path.","Shortcut entered by the user.","Function to format a path","Lone methode of the trait.","","","","","","","","Structure to contain the data of a line in the directory …","Trait to read a vector of a line of the directory file …","Structure to contain the state of the search","Function to add a shortut to a line of the directory file","","","","","If a path was found for the given shortut, <code>correct</code> …","","Arguments","","","Returns the argument unchanged.","Returns the argument unchanged.","Function to get the path of a directory from the directory …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Function to convert a <code>DirsLine</code> to a string","Get the path of the directory","The highest priority found.","The path of the directory","If a path was not found for the given shortut, <code>prioritised</code> …","The priority of the directory","The priority of the directory incremented by <code>incr</code> (see …","Function to read the directory file","Function to read a line of the directory file","Function to remove a shortut from a line of the directory …","The shortuts of the directory","Function to print state of the directories","","","","","","","Trait to print command errors (uses <code>eprintln!</code>).","Trait to print error of opening a file (uses <code>eprintln!</code>)","Trait to print internal errors (uses <code>panic!</code>). These errors …","Trait to print error of writing in a file (uses <code>eprintln!</code>)","Print a command error.","Print a data error.","Print an internal error.","Unable to open a file.","Print a system error.","Print a user error.","Print a user error.","Unable to write a file.","Pop a directory from the history file.","Push a directory to the history file."],"i":[0,5,5,5,5,0,0,0,0,5,0,5,0,0,0,5,5,0,0,0,5,5,0,5,0,0,5,0,5,5,5,5,0,0,8,0,0,8,8,8,8,8,8,0,0,8,15,16,8,16,8,16,8,16,8,8,16,8,16,8,16,0,16,0,18,8,16,8,16,8,16,8,0,0,0,0,20,19,20,19,20,20,0,20,19,20,19,0,20,19,19,21,20,19,20,19,19,0,0,0,19,0,20,19,20,19,20,19,0,0,0,0,25,26,26,27,25,26,25,28,0,0],"f":"```{ce{}{}}0{{{d{b}}f}h}```{{}j}``{{bf}b}``{{jl}n}{cc{}}`{j{{Ad{{Ab{A`}}{Ab{b}}f}}}}````6{{}h}{{AfAf{d{b}}}{{Ah{b}}}}``{c{{Aj{e}}}{}{}}0{cAl{}}``{{{d{b}}Af}h}```````````{{A`b}h}{{AnAf}h}===={{}B`}{{}A`}{{B`l}n}{{A`l}n}{{A`l}{{Aj{hBb}}}}=={ce{}{}}0`{Afb}`0{BdA`}{cb{}}====<<```{{BffAfAf}b}4444`{{}Bh}1{{Bhl}n}{{Bfl}n}{cc{}}0{{BffBhAf}b}99{{BfAf}b}{{BjBlBlAf}b}`````{{Af{d{A`}}Bn}{{Ah{b}}}}{{Af{d{A`}}fBnBh}b}{{BffAf}b}`{AfC`}{c{{Aj{e}}}{}{}}000{cAl{}}0````{{CbAf}c{}}{{Cdc{Ah{e}}}e{}{}}0{{CfAf{Ah{c}}}c{}}212{{ChAf}h}{Afb}{{AfAf}h}","c":[],"p":[[5,"String",122],[1,"slice"],[1,"bool"],[1,"unit"],[5,"GlobalData",0],[5,"Formatter",123],[8,"Result",123],[6,"Cmd",34],[5,"Vec",124],[1,"tuple"],[1,"str"],[6,"Option",125],[6,"Result",126],[5,"TypeId",127],[10,"AppendDefault",34],[5,"ShortPath",34],[5,"Error",123],[10,"ToCmd",34],[5,"DirsLine",72],[5,"SearchState",72],[10,"ReadVec",72],[1,"usize"],[1,"u32"],[1,"never"],[10,"InteractionError",108],[10,"SingleError",108],[10,"ReadError",108],[10,"WriteError",108]],"b":[[54,"impl-Debug-for-Cmd"],[55,"impl-Display-for-Cmd"]]}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
